type Environment = variant { Production; Development; Staging };
type Payload = record { sent : text; received : text };
type PayloadBatch = record { payloads : vec Payload; notary_pub_key : blob };
type PresentationBatch = record {
  presentations : vec text;
  notary_pub_key : blob;
};
type PublicKeyReply = record { sec1_pk : text; etherum_pk : text };
type Result = variant { Ok : vec PayloadBatch; Err : text };
type Result_1 = variant { Ok : VerificationResponse; Err : text };
type VerificationResponse = record {
  signature : text;
  root : text;
  payload_batches : vec PayloadBatch;
};
service : (opt Environment) -> {
  // A simple test function that returns "Ping"
  ping : () -> (text) query;
  // Retrieves the public key of the canister
  public_key : () -> (PublicKeyReply);
  reinitialize : (opt Environment) -> ();
  // Asynchronously verifies a vector of PresentationBatches; intended for canister calls
  verify_async : (vec PresentationBatch) -> (Result) query;
  // Asynchronously verifies proof requests; intended for direct user calls
  // Returns a detailed verification response
  verify_direct : (vec PresentationBatch) -> (Result_1);
}
