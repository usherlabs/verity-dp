use std::collections::HashMap;
use std::env;
use std::fs;

// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{GUEST_ELF, GUEST_ID};
use risc0_zkvm::{default_prover, ExecutorEnv};
use serde::{Deserialize, Serialize};
use std::time::Instant;
use verity_verify_private_transcript::encodings_precompute::{generate, verify, EncodingsMapType};
use verity_verify_private_transcript::presentation::{EncodingPayload, Presentation};
use verity_verify_private_transcript::transcript::{Direction, Idx};
use verity_verify_private_transcript::{EncodedValue, Full};

#[derive(Debug, Serialize, Deserialize)]
struct ZKInput {
    presentation: Presentation,
    encodings: Option<EncodingsMapType>,
}

fn main() {
    let args: Vec<String> = env::args().collect();
    // !TODO: toggle this to enable or disable precompute
    // Check if an argument was provided (besides the program name)
    let use_precompute = args.len() > 1;

    if use_precompute {
        println!("use precompute")
    } else{
        println!("no precompute")
    }

    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    let presentation_bytes_input: Vec<u8> =
        fs::read("fixtures/blake3.example.presentation.tlsn").unwrap();
    let presentation: Presentation = bincode::deserialize(&presentation_bytes_input).unwrap();

    let encodings_bytes_input: Vec<u8> = fs::read("fixtures/precomputed_encodings.json").unwrap();
    let encodings_precompute: HashMap<(Direction, Idx), Vec<EncodedValue<Full>>> =
        bincode::deserialize(&encodings_bytes_input).unwrap();

    // ? do not generate encodings anymore because it has been cached and loaded from fixtures
    // let EncodingPayload {
    //     partial_openings,
    //     commitment_seed,
    // } = presentation.get_encodings_compute_payload();
    // IC
    // generate the encodings on the 'internet computer'
    // `partial_openings` and `commitment_seed`` by sending them to the IC
    // for generation of the encodings
    // let encodings_precompute: HashMap<(Direction, Idx), Vec<EncodedValue<Full>>> = generate(&partial_openings, &commitment_seed).unwrap();
    // fs::write("fixtures/precomputed_encodings.json", bincode::serialize(&encodings_precompute).unwrap()).unwrap();

    let zk_input = ZKInput {
        presentation,
        encodings: if use_precompute {
            Some(encodings_precompute)
        } else {
            None
        },
    };
    let zk_payload = bincode::serialize(&zk_input).unwrap();

    let env = ExecutorEnv::builder()
        .write_slice(&zk_payload)
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let now = Instant::now();
    let prove_info = prover.prove(env, GUEST_ELF).unwrap();
    println!(
        "Program took {} seconds to run {}",
        now.elapsed().as_secs(),
        if use_precompute {
            "using precompute"
        } else {
            "without using precompute"
        }
    );

    // extract the receipt.
    let receipt = prove_info.receipt;

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    let _output: u32 = receipt.journal.decode().unwrap();

    // println!("{:?}", _output);

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt.verify(GUEST_ID).unwrap();
}
