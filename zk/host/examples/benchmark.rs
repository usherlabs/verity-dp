use std::{env, time::Instant};

use k256::pkcs8::DecodePublicKey;
// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use risc0_zkvm::{default_prover, ExecutorEnv, ProverOpts};
use verity_verify_tls::{
    tlsn_core::presentation::Presentation, NotaryPubKey, PresentationBatch, ZkTlsProof,
};

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let args: Vec<String> = env::args().collect();
    // !TODO: toggle this to enable or disable precompute
    // Check if an argument was provided (besides the program name)
    let use_precompute = args.len() > 1;

    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    let notary_pub_key: NotaryPubKey =
        k256::PublicKey::from_public_key_pem(verity_fixtures::notary::PUB_KEY)?
            .to_sec1_bytes()
            .into_vec();

    let presentation: Presentation =
        serde_json::from_str(verity_fixtures::presentation::PRESENTATION_32B).unwrap();

    if use_precompute {
        println!("use precompute");
        // This is actually abandoned
        // presentation.precompute_encodings()?;
    } else {
        println!("no precompute");
    }

    let presentation_batch = PresentationBatch {
        notary_pub_key: notary_pub_key.clone(),
        presentations: vec![presentation],
    };

    let presentation_batches = vec![presentation_batch];

    let input_bytes = bincode::serialize(&presentation_batches)?;

    let env = ExecutorEnv::builder()
        .write(&input_bytes.len())?
        .write_slice(&input_bytes)
        .build()?;

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let now = Instant::now();

    let prove_info = prover
        .prove_with_opts(
            env,
            verity_dp_zk_methods::VERITY_DP_ZK_VERIFY_ELF,
            &ProverOpts::succinct(),
        )
        .unwrap();
    println!(
        "Program took {} seconds to run {}",
        now.elapsed().as_secs(),
        if use_precompute {
            "using precompute"
        } else {
            "without using precompute"
        }
    );

    // extract the receipt.
    let receipt = prove_info.receipt;

    let output_bytes: Vec<u8> = receipt.journal.decode()?;
    let (_data, proof): (Vec<u8>, ZkTlsProof) = bincode::deserialize(&output_bytes)?;

    println!("proof: {:#?}", hex::encode(proof.hash));

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt
        .verify(verity_dp_zk_methods::VERITY_DP_ZK_VERIFY_ID)
        .unwrap();

    Ok(())
}
