// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.

use std::env;

use k256::pkcs8::DecodePublicKey;
use risc0_zkvm::{default_prover, ExecutorEnv};
use verity_dp_zk_methods::{VERITY_DP_ZK_VERIFY_ELF, VERITY_DP_ZK_VERIFY_ID};
use verity_verify_tls::{
    tlsn_core::presentation::Presentation, verify_private_facets, NotaryPubKey, PresentationBatch,
    ZkTlsProof,
};

#[test]
fn host_works() {
    env::set_var("RISC0_DEV_MODE", "1");

    // TODO: This profiling mechanism causes the proof generation to fail.
    // let profile_file = format!("../profile/{}.pb", Local::now().format("%Y-%m-%d_%H-%M-%S"));
    // env::set_var("RISC0_PPROF_OUT", profile_file);

    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // An default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    let notary_pub_key: NotaryPubKey =
        k256::PublicKey::from_public_key_pem(verity_fixtures::notary::PUB_KEY)
            .unwrap()
            .to_sec1_bytes()
            .into_vec();

    let presentation_string = verity_fixtures::presentation::PRESENTATION_32B;

    let presentation: Presentation = serde_json::from_str(&presentation_string).unwrap();

    let presentation_batch = PresentationBatch {
        notary_pub_key: notary_pub_key.clone(),
        presentations: vec![presentation],
    };

    let presentation_batches = vec![presentation_batch];

    let (verified_by_host, _) = verify_private_facets(presentation_batches.clone()).unwrap();

    let input_bytes = bincode::serialize(&presentation_batches).unwrap();

    let env = ExecutorEnv::builder()
        .write(&input_bytes.len())
        .unwrap()
        .write_slice(&input_bytes)
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    println!("Proving...");
    println!("Presentation size: {:?}", presentation_string.len());
    println!("ELF size: {:?}", VERITY_DP_ZK_VERIFY_ELF.len());
    println!("--------------------------------");
    let prove_info = prover.prove(env, VERITY_DP_ZK_VERIFY_ELF).unwrap();

    // extract the receipt.
    let receipt = prove_info.receipt;

    let zkvm_result_bytes: Vec<u8> = receipt.journal.decode().unwrap();

    let (_data, verified_by_guest): (Vec<u8>, ZkTlsProof) =
        bincode::deserialize(&zkvm_result_bytes).unwrap();

    assert_eq!(verified_by_guest.hash, verified_by_host.hash);

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt.verify(VERITY_DP_ZK_VERIFY_ID).unwrap();
}
